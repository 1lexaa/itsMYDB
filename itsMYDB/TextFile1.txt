Базы данных

БД - способ хранения (организации) данных, главной особенностью которого
является наличие связей (реляций) между данными.

Наиболее популярные БД - табличные
В них данные распределяются по таблицам
 Таблица - контейнер для данных, в котором каждая информационная единица
   имеет определенную структуру (одинаковую для всех единиц)
 Ячейка таблицы - хранит примитивные (типизированные) данные, то есть 
  каждая ячейка имеет свой тип данных.

Работа с БД может иметь несколько целей:
 - создание (разметка) таблиц
 - заполнение таблиц данными

СУБД (Система управления БД, DBMS) - оболочка (ПО), предоставляющая интерфейс
взаимодействия как с разметкой таблиц, так и с хранимыми данными.
SQL - язык структурных запросов - язык команд для СУБД (язык интерфейса) 
Согласно с указанными задачами SQL имеет под-языки
 DDL (Data Definition Lang) - язык разметки
 DML (Data Manipulation Lang) - работа с данными
 DCL (Control) - доступ к СУБД и данным (права доступа)
 TCL (Transaction Control Lang)

Сам язык SQL очень старый (стандарт 1974), современные версии дополнены
новым функционалом, но, этот функционал привязан к конкретной СУБД.
Говорят о диалектах СУБД
 T-SQL (MS SQL) -  Microsoft
 PSQL (Procedure) - Oracle (MariaDB) / MySQL
Плюс в каждой СУБД есть особенности, в основном - свои дополнительные 
 типы данных и операции с ними. Поэтому команды SQL для разных СУБД 99% 
 несовместимые между собой

О синтаксисе SQL
 SQL регистронезависимый - можно писать в любом регистре, но! бывает
  установлена настройками зависимость регистра имен (таблиц, полей и т.п. -
  пользовательских объектов)
 Команды не распределены по пространствам имен, поэтому почти все "нормальные"
  слова зарезервированы. Для разделения пользовательских имен и стандартных
  команд их принято писать в разном регистре
   SELECT name FROM users
   select NAME from USERS

Идентификация и ключевые поля
 В БД есть принцип - каждая информационная единица должна быть уникальной,
  другими словами, должна быть команда, обращающаяся именно к этой единице.
  Например (от обратного): в таблице хранятся чеки - дата и сумма
   в какой-то момент два кассовых аппарата совершенно одновременно пробивают
   чеки на одинаковые суммы
    Date Sum
    11    100
    11    100
   Как удалить одну из них? любое условие приведет к выбору либо двух, либо
   ни одной.
 Ключевым называется поле, значение в котором уникально (не повторяется в
  других строках). Такое поле может использоваться для идентификации - 
  однозначного обращения к данной инфо-единице
 Ключ (вообще) - это поле или комбинация полей, идентифицирующая запись.
 На практике чаще всего каждая таблица имеет отдельное ключевое поле и 
  называется оно id  (tablename_id)
Какой тип выбрать для id?
 Часто в учебниках - это числовой тип (int)
 В стандарте - UUID (GUID) - id с глобальной уникальностью (в мире)
Индексное (индексированное) поле - поле с сортировкой. Одно из полей
 индексируется автоматически (не требует доп. данных). Остальные индексы
 создают дополнительные блоки данных для своей работы.
Ключевое поле, которое индексируется, называют первичным ключем

Домен - пользовательский тип данных (~typedef)

------------- О типах данных ---------------------------------
INT DECIMAL BIGINT             // SHORT LONG  BYTE
SMALLINT TINYINT NUMERIC
FLOAT MONEY                    // DOUBLE

DATE        - только дата
                               // TIMESTAMP   - дата и время
DATETIME    - дата и время
DATETIME2   - дата и время
значения: 
    '2022-05-19' 
    '2022-05-19 09:19:23'  
    '2022-05-19T09:19:23'
! '2022-05-19' = '2022-05-19 00:00:00' - начало дня

CHAR(N)      - ровно N символов
VARCHAR(N)   - не более N символов
NCHAR(N)     - ровно N символов (Юникод)
NVARCHAR(N)  - не более N символов (Юникод)
TEXT         - CLOB (Char Large OBject)
Значения: 
    'Text' - CHAR/VARCHAR
    N'Вітання' - Юникод

BLOB - Binary Large Object - "сырое" представление - для файлов/картинок/звуков...

------------------------ NULL --------------------------------
Особую роль в БД играет NULL
В отличие от языков программирования, в БД NULL - это отсутствие данных,
 "прочерк" в таблице
По правилам SQL все операции (кроме специальных) с NULL дают результат NULL
 NULL = NULL  --> NULL      = (один раз) - сравнение
 NULL <> NULL --> NULL      <> - неравенство, допускается !=
 2 <> NULL    --> NULL
 NULL IS NULL  --> true
 2 IS NOT NULL --> true

 В качестве атрибутов для полей таблиц
 field INT NULL       - допускаются NULL как значение поля (по умолчанию, можно не писать NULL)
 field INT NOT NULL   - не допускаются (обязательное поле)

 ------------------- Связи -----------------
 Связями называют отношения, создаваемые между таблицами (или другими элементами).
 Обычно, связи позволяют создавать "ссылку" - указание на запись в другой таблице
 Managers                     Departments
  Id_main_dep  ---------------> Id
     FOREIGN KEY              PRIMARY KEY

A JOIN (INNER JOIN) B  - полное совпадение из А и В
A LEFT JOIN В  -- всё из А, при совпадении с В - данные, иначе NULL
A RIGHT JOIN B  -- всё из В,...
A,B  -- всё из А с каждым из В -- декартово произведение / FULL OUTER JOIN

Типы отношений (relation multiplicity)
один-к-одному     : способ разделить таблицу, связь исключительно однозначная (студент-зачетка)
  технически - не рекомендуется, соединяем таблицы. Если нет - две ссылки друг на друга
один-к-многим     : студент - группа (один студент только в одной группе, но в группе много студентов)
  технически -  односторонняя ссылка, у студента есть ссылка на группу, в группе нет никаких ссылок
многие-к-многим   : студент - преподаватель (студент работает с многими преп. и наоборот)
  технически - создает доп. таблица, содержащая связи Id_Stud - Id_prep


------------------- Агрегация и группирование -----------------------
Функции агрегации (агрегационные функции) - это функции, которые в качестве параметра
принимают множество, а результатом есть скаляр - одно значение.
SUM
COUNT
AVG
MIN
MAX

Запросы с группированием - запросы в которых "смешиваются" скалярные и множественные значения
   Sales
Id_Prod Cnt  - GROUP BY Id_Prod --->  Id_Prod Cnt  ---> Id_Prod Cnt
1        2                              1      2          1     [2,3,1]  
2        4                              1      3                  
1        3                              1      1                  
3        4                              2      4          2     [4,2]   
1        1                              2      2                  
2        2                              3      4          3     [4,1]   
3        1                              3      1                  

Вывести результат запроса с группировкой можно только в том случае, если
к "множественным" полям применяется функция агрегирования. В противном случае - ошибка

------------------- Подзапросы ------------------------------
Пример: вывести данные о продаже гвоздей: ФИО -- кол-во продаж
требуется: если продаж нет, то вывести 0 (или прочерк)
Сложность: даже при приоритетном объединении дополнительное WHERE 
исключит пустые строки.
Нужно: условие на "гвозди" наложить раньше, чем будет соединение с менеджерами
Managers           Выборка
1                  1    - 14
2                  3    - 6
3                  7    - 2
...                ...  - 9
60                 20   - 11

--------------  ?? Поделиться базой данных ----------------------
- Дать ссылку + логин/пароль для подключения к БД
  = БД чаще всего используют для общей работы, не часто БД - это "локальная"
    часть приложения
- Миграционный скрипт (как мы создавали БД) - набор команд, создающих
  таблицы и заполняющих их значениями.
  = Используются для "разворачивания" новых приложений (в т.ч. сайтов)

----------------- Хранимые процедуры ------------------------
Хранимые процедуры (Stored Procedures) - пользовательские объекты, обычно
 сокращающие способ обращение к большим (или популярным) запросам.
Чаще всего используются для создания "интерфейса" доступа к данным,
 скрывая реализацию и повышая безопасность. 
 + процедуры (тела) уже скомпилированы, значит быстрее выполняются
Процедуры возвращают таблицы, но
 В отличие от пользовательских функций, процедуры НЕ могут быть частью
 другого запроса, в т.ч. использоваться в объединениях.
Процедуры хранятся в БД: создаются один раз и не разрушаются после 
 отключения от СУБД

ЯП                                   СУБД
make("SELECT...")  --------------->  (компиляция)-(исполнение)-TABLE
 в ЯП нужно знать структуру БД, имена полей и т.п.

make("GET_STAT")   --------------->  (исполнение)-GET_STAT{ SELECT... } --> TABLE
 достаточно знать имя хранимой процедуры, остальные детали - в ее теле (со стороны СУБД)

---------------------- Нормализация БД ---------------------------
Процесс организации (или реорганизации) данных в БД (создание или изменения структуры БД)
Главные цели:
 - устранение избыточности данных (устранение аномалий)
 - устранение несогласованных зависимостей

Аномалии: ситуации, связанные со "странными" эффектами при работе с БД
 - аномалии модификации == модификация одних данных требует изменения других (повторов)
     Managers
      Surname   Name   Lastname  Shortname
      Smith     John    N         J. Smith
      |Smeeth - внесли изменение      | аномалия - надо продублировать изменение

 - аномалии удаления
 - аномалии добавления


Первая нормальная форма (1НФ)
- Нет повторяющихся информационных единиц
- В каждой ячейке таблицы - скалярное (атомарное) значение (не массив/набор)
- В каждом столбце данные только одного типа

Вторая нормальная форма (2НФ)
 - Выполняются условия 1НФ
 - Все неключевые атрибуты должны НЕПРИВОДИМО зависеть от первичного ключа
(примеры из https://habr.com/ru/post/254773/)
 ---Ключ---
Модель	Фирма	Цена	  Скидка     // Ключ   - Модель-Фирма
M5	    BMW	    5500000	  5%         // Фирма  - часть ключа
X5M	    BMW	    6000000	  5%         // Цена   - это цена модели (однозначная зависимость)
M1	    BMW	    2500000	  5%         // Скидка - зависит не от модели, а от Фирмы (от части ключа) - нарушение 2НФ
GT-R	Nissan	5000000	  10%        // 

SELECT * FROM Models

Решение

Модель	Фирма	Цена	     |   Фирма     Скидка
M5	    BMW	    5500000      |   BMW	   5%    
X5M	    BMW	    6000000      |   Nissan    10%    
M1	    BMW	    2500000      |   
GT-R	Nissan	5000000      |    

SELECT * FROM Models M JOIN Discount D ON M.Фирма = D.Фирма


Третья нормальная форма (3НФ)
 - 2НФ
 - Все неключевые атрибуты должны НЕТРАНЗИТИВНО зависеть от первичного ключа
   Если есть транзитивная зависимость, ее надо выносить в отдельную таблицу
   (транзитивный - через "посредника" - А зависит от В, В - от С ==> А транзитивно зависит от С)

Фирма	Магазин	    Телефон   -- 
BMW	    Риал-авто	87-33-98  -- Прямая зависимость Фирма-Магазин, Магазин-Телефон
Audi	Риал-авто	87-33-98  -- Транзитивная зависимость Фирма--Телефон
Nissan	Некст-Авто	94-54-12  -- Если ключ-Фирма, то 3НФ нарушается

Магазин	    Телефон     | Фирма 	Магазин
Риал-авто	87-33-98    | BMW	    Риал-авто
Некст-Авто	94-54-12    | Audi	    Риал-авто
                        | Nissan	Некст-Авто

? Стоит ли использовать литералы (названия) в качестве ключа?
! Нет, не стоит. 
 - Возможны появления нескольких объектов с одинаковым названием (филиалов),
    но с разным "товаром" --> Аномалия вставки - нужно добавить различия, на
    которые БД не расчитана
 - Возможны ситуации, когда в названия вносятся изменения, это приведет
    к нарушению связей (название надо поменять и в первичном, и во внешних ключах)
   Пример:
    Магазин	    Телефон     | Фирма 	Магазин
   Реал-авто	87-33-98    | BMW	    Риал-авто  \ _ Нарушение связи -
  / Некст-Авто	94-54-12    | Audi	    Риал-авто  /    надо тоже поменять
 *                          | Nissan	Некст-Авто
 Изменение

Решение:
Id  Название	 Телефон     | Фирма  	Магазин_Id
1A  Риал-авто	 87-33-98    | BMW	    1A
1F  Некст-Авто	 94-54-12    | Audi	    1A
                             | Nissan	1F
Есть одна из традиций называть одинаково первичный и внешний ключи
Магазин_Id  Название	 Телефон     | Фирма  	Магазин_Id
1A          Риал-авто	 87-33-98    | BMW	    1A
...

+ Читаемость структуры (понятно какие поля связаны)
-  JOIN ON Sales.Shop_id = Shop.Shop_id 
VS    Sales.Shop_id = Shop.Id

                                         связь "многие-к-многим"
----------------------                  /
Атрибуты (id, name) | Модели   |  Реализации
1 Цвет              | 11 M5	   |  id_M  id_A   Val
2 Объем             | 12 X5M   |  11      1    Yellow
3 Коробка           | 13 M1	   |  11      3    Sequental



БКНФ (Бойса-Кодда) НФ - 3.5НФ - усиленная 3НФ

----------------- Триггеры ------------------------
В СУБД триггеры - это аналог событий и их обработчиков.
По характеру событий триггеры делят на DML- и DDL-триггеры.
Триггеры данных (DML-триггеры) используются для:
 - фильтрации данных (проверка/валидация)
 - задач аккумулирования
Аккумулирование: ведение дополнительных таблиц/записей, 
связанных с статистическими/итоговыми данными.
Например, нужно постоянно иметь сведения о полной сумме продаж
Поскольку, ранние записи не меняются, при расчете суммы каждый
раз приходится повторять сложение данных, которые ранее уже складывались.
И этим результатом (предыдущей суммой) можно было бы воспользоваться.

Идея: после каждого подсчета суммы мы сохраняем результат в спец.
таблице (аккумуляторе), при появлении новой записи (чека) этот
аккумулятор обновляется. А при запросе полной суммы возвращается
значение из аккумулятора.
Триггеры - это возможность получить информацию о событии добаления чека
и, как результат, обновить аккумулятор

Технически, триггер является хранимой процедурой, привязанной к событию,
возникающему в конкретной таблице (триггер привязан к таблице)